CCS PCM C Compiler, Version 5.008, 5967               11-jul-16 00:04

               Filename:   C:\Users\Bellini\Documents\Projetos PIC\KeyPad3x4\source.lst

               ROM used:   771 words (9%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           26 (7%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   285
0003:  NOP
.................... #include <16F876.h> 
.................... //////// Standard Header file for the PIC16F876 device //////////////// 
.................... #device PIC16F876 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  31
0009:  RETLW  32
000A:  RETLW  33
000B:  RETLW  34
000C:  RETLW  35
000D:  RETLW  36
000E:  RETLW  37
000F:  RETLW  38
0010:  RETLW  39
0011:  RETLW  2A
0012:  RETLW  30
0013:  RETLW  23
0014:  BCF    0A.0
0015:  BCF    0A.1
0016:  BCF    0A.2
0017:  ADDWF  02,F
0018:  RETLW  28
0019:  RETLW  0C
001A:  RETLW  01
001B:  RETLW  06
001C:  DATA 0C,28
001D:  DATA D2,27
001E:  DATA 4E,2A
001F:  DATA 4F,17
0020:  DATA 2E,17
0021:  DATA 00,00
0022:  DATA 0C,10
0023:  DATA C3,30
0024:  DATA F2,1E
0025:  DATA A5,31
0026:  DATA 00,00
0027:  DATA 0C,10
0028:  DATA C3,30
0029:  DATA F2,1E
002A:  DATA A5,3A
002B:  DATA 00,0C
002C:  DATA 0C,10
002D:  DATA C3,30
002E:  DATA F2,1E
002F:  DATA A5,3A
0030:  DATA 00,01
0031:  DATA 0C,28
0032:  DATA D2,27
0033:  DATA 4E,2A
0034:  DATA 4F,17
0035:  DATA 2E,17
0036:  DATA 00,00
*
0112:  MOVF   0B,W
0113:  MOVWF  26
0114:  BCF    0B.7
0115:  BSF    03.5
0116:  BSF    03.6
0117:  BSF    0C.7
0118:  BSF    0C.0
0119:  NOP
011A:  NOP
011B:  BCF    03.5
011C:  MOVF   0C,W
011D:  ANDLW  7F
011E:  BTFSC  03.2
011F:  GOTO   159
0120:  BCF    03.6
0121:  MOVWF  27
0122:  BSF    03.6
0123:  MOVF   0D,W
0124:  BCF    03.6
0125:  MOVWF  28
0126:  BSF    03.6
0127:  MOVF   0F,W
0128:  BCF    03.6
0129:  MOVWF  29
012A:  MOVF   27,W
012B:  MOVWF  2B
012C:  CALL   0E6
012D:  MOVF   28,W
012E:  BSF    03.6
012F:  MOVWF  0D
0130:  BCF    03.6
0131:  MOVF   29,W
0132:  BSF    03.6
0133:  MOVWF  0F
0134:  BSF    03.5
0135:  BSF    0C.7
0136:  BSF    0C.0
0137:  NOP
0138:  NOP
0139:  BCF    03.5
013A:  RLF    0C,W
013B:  RLF    0E,W
013C:  ANDLW  7F
013D:  BTFSC  03.2
013E:  GOTO   159
013F:  BCF    03.6
0140:  MOVWF  27
0141:  BSF    03.6
0142:  MOVF   0D,W
0143:  BCF    03.6
0144:  MOVWF  28
0145:  BSF    03.6
0146:  MOVF   0F,W
0147:  BCF    03.6
0148:  MOVWF  29
0149:  MOVF   27,W
014A:  MOVWF  2B
014B:  CALL   0E6
014C:  MOVF   28,W
014D:  BSF    03.6
014E:  MOVWF  0D
014F:  BCF    03.6
0150:  MOVF   29,W
0151:  BSF    03.6
0152:  MOVWF  0F
0153:  INCF   0D,F
0154:  BTFSC  03.2
0155:  INCF   0F,F
0156:  BCF    03.6
0157:  GOTO   115
0158:  BSF    03.6
0159:  BCF    03.6
015A:  BTFSC  26.7
015B:  BSF    0B.7
015C:  RETURN
*
01AD:  CLRF   77
01AE:  CLRF   78
01AF:  MOVF   28,W
01B0:  BCF    03.0
01B1:  BTFSC  29.0
01B2:  ADDWF  77,F
01B3:  RRF    77,F
01B4:  RRF    78,F
01B5:  BTFSC  29.1
01B6:  ADDWF  77,F
01B7:  RRF    77,F
01B8:  RRF    78,F
01B9:  BTFSC  29.2
01BA:  ADDWF  77,F
01BB:  RRF    77,F
01BC:  RRF    78,F
01BD:  BTFSC  29.3
01BE:  ADDWF  77,F
01BF:  RRF    77,F
01C0:  RRF    78,F
01C1:  BTFSC  29.4
01C2:  ADDWF  77,F
01C3:  RRF    77,F
01C4:  RRF    78,F
01C5:  BTFSC  29.5
01C6:  ADDWF  77,F
01C7:  RRF    77,F
01C8:  RRF    78,F
01C9:  BTFSC  29.6
01CA:  ADDWF  77,F
01CB:  RRF    77,F
01CC:  RRF    78,F
01CD:  BTFSC  29.7
01CE:  ADDWF  77,F
01CF:  RRF    77,F
01D0:  RRF    78,F
*
01E7:  MOVF   0B,W
01E8:  MOVWF  27
01E9:  BCF    0B.7
01EA:  BSF    03.5
01EB:  BSF    03.6
01EC:  BSF    0C.7
01ED:  BSF    0C.0
01EE:  NOP
01EF:  NOP
01F0:  BTFSC  03.0
01F1:  GOTO   219
01F2:  BCF    03.5
01F3:  MOVF   0C,W
01F4:  ANDLW  7F
01F5:  BCF    03.6
01F6:  MOVWF  28
01F7:  BSF    03.6
01F8:  MOVF   0D,W
01F9:  BCF    03.6
01FA:  MOVWF  29
01FB:  BSF    03.6
01FC:  MOVF   0F,W
01FD:  BCF    03.6
01FE:  MOVWF  2A
01FF:  MOVF   28,W
0200:  MOVWF  2B
0201:  CALL   0E6
0202:  MOVF   29,W
0203:  BSF    03.6
0204:  MOVWF  0D
0205:  BCF    03.6
0206:  MOVF   2A,W
0207:  BSF    03.6
0208:  MOVWF  0F
0209:  BSF    03.5
020A:  BSF    0C.7
020B:  BSF    0C.0
020C:  NOP
020D:  NOP
020E:  BCF    03.5
020F:  BCF    03.6
0210:  DECFSZ 26,F
0211:  GOTO   213
0212:  GOTO   216
0213:  BSF    03.5
0214:  BSF    03.6
0215:  GOTO   219
0216:  GOTO   238
0217:  BSF    03.5
0218:  BSF    03.6
0219:  BCF    03.5
021A:  RLF    0C,W
021B:  RLF    0E,W
021C:  ANDLW  7F
021D:  BCF    03.6
021E:  MOVWF  28
021F:  BSF    03.6
0220:  MOVF   0D,W
0221:  BCF    03.6
0222:  MOVWF  29
0223:  BSF    03.6
0224:  MOVF   0F,W
0225:  BCF    03.6
0226:  MOVWF  2A
0227:  MOVF   28,W
0228:  MOVWF  2B
0229:  CALL   0E6
022A:  MOVF   29,W
022B:  BSF    03.6
022C:  MOVWF  0D
022D:  BCF    03.6
022E:  MOVF   2A,W
022F:  BSF    03.6
0230:  MOVWF  0F
0231:  INCF   0D,F
0232:  BTFSC  03.2
0233:  INCF   0F,F
0234:  BCF    03.0
0235:  BCF    03.6
0236:  DECFSZ 26,F
0237:  GOTO   1EA
0238:  BTFSC  27.7
0239:  BSF    0B.7
023A:  RETURN
023B:  MOVF   29,W
023C:  CLRF   78
023D:  SUBWF  28,W
023E:  BTFSC  03.0
023F:  GOTO   243
0240:  MOVF   28,W
0241:  MOVWF  77
0242:  GOTO   24F
0243:  CLRF   77
0244:  MOVLW  08
0245:  MOVWF  2A
0246:  RLF    28,F
0247:  RLF    77,F
0248:  MOVF   29,W
0249:  SUBWF  77,W
024A:  BTFSC  03.0
024B:  MOVWF  77
024C:  RLF    78,F
024D:  DECFSZ 2A,F
024E:  GOTO   246
024F:  RETURN
0250:  MOVF   78,W
0251:  MOVF   26,W
0252:  MOVWF  28
0253:  MOVLW  64
0254:  MOVWF  29
0255:  CALL   23B
0256:  MOVF   77,W
0257:  MOVWF  26
0258:  MOVF   78,W
0259:  MOVLW  30
025A:  BTFSS  03.2
025B:  GOTO   263
025C:  BTFSS  27.1
025D:  GOTO   26A
025E:  BTFSC  27.3
025F:  GOTO   26A
0260:  BTFSC  27.4
0261:  MOVLW  20
0262:  GOTO   266
0263:  BCF    27.3
0264:  BCF    27.4
0265:  BSF    27.0
0266:  ADDWF  78,F
0267:  MOVF   78,W
0268:  MOVWF  2B
0269:  CALL   0E6
026A:  MOVF   26,W
026B:  MOVWF  28
026C:  MOVLW  0A
026D:  MOVWF  29
026E:  CALL   23B
026F:  MOVF   77,W
0270:  MOVWF  26
0271:  MOVF   78,W
0272:  MOVLW  30
0273:  BTFSS  03.2
0274:  GOTO   27B
0275:  BTFSC  27.3
0276:  GOTO   27F
0277:  BTFSS  27.0
0278:  GOTO   27F
0279:  BTFSC  27.4
027A:  MOVLW  20
027B:  ADDWF  78,F
027C:  MOVF   78,W
027D:  MOVWF  2B
027E:  CALL   0E6
027F:  MOVLW  30
0280:  ADDWF  26,F
0281:  MOVF   26,W
0282:  MOVWF  2B
0283:  CALL   0E6
0284:  RETURN
....................  
.................... #list 
....................  
.................... #USE DELAY(CLOCK = 4000000) 
*
0037:  MOVLW  2C
0038:  MOVWF  04
0039:  BCF    03.7
003A:  MOVF   00,W
003B:  BTFSC  03.2
003C:  GOTO   04B
003D:  MOVLW  01
003E:  MOVWF  78
003F:  CLRF   77
0040:  DECFSZ 77,F
0041:  GOTO   040
0042:  DECFSZ 78,F
0043:  GOTO   03F
0044:  MOVLW  4A
0045:  MOVWF  77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  GOTO   049
0049:  DECFSZ 00,F
004A:  GOTO   03D
004B:  RETURN
.................... #FUSES XT, NOWDT, NOPROTECT, NOPUT 
....................  
.................... #define use_portb_kbd TRUE 
.................... #define use_portb_lcd TRUE 
....................  
.................... #include <KBD.c> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             KBD.C                                 //// 
.................... ////                  Generic keypad scan driver                       //// 
.................... ////                                                                   //// 
.................... ////  kbd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  c = kbd_getc(c)  Will return a key value if pressed or /0 if not //// 
.................... ////                   This function should be called frequently so as //// 
.................... ////                   not to miss a key press.                        //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... ////////////////// The following defines the keypad layout on port D 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_kbd TRUE 
....................  
.................... // Make sure the port used has pull-up resistors (or the LCD) on 
.................... // the column pins 
....................  
.................... #if defined use_portb_kbd 
....................    #byte kbd = getenv("SFR:PORTB") 
.................... #else 
....................    #byte kbd = getenv("SFR:PORTD") 
.................... #endif 
....................  
.................... #if defined use_portb_kbd 
....................    #define set_tris_kbd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_kbd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... //Keypad connection:   (for example column 0 is B2) 
.................... //                Bx: 
....................  
.................... #ifdef blue_keypad  ///////////////////////////////////// For the blue keypad 
.................... #define COL0 (1 << 2) 
.................... #define COL1 (1 << 3) 
.................... #define COL2 (1 << 6) 
....................  
.................... #define ROW0 (1 << 4) 
.................... #define ROW1 (1 << 7) 
.................... #define ROW2 (1 << 1) 
.................... #define ROW3 (1 << 5) 
....................  
.................... #else ////////////////////////////////////////////////// For the black keypad 
.................... #define COL0 (1 << 5) 
.................... #define COL1 (1 << 6) 
.................... #define COL2 (1 << 7) 
....................  
.................... #define ROW0 (1 << 1) 
.................... #define ROW1 (1 << 2) 
.................... #define ROW2 (1 << 3) 
.................... #define ROW3 (1 << 4) 
....................  
.................... #endif 
....................  
.................... #define ALL_ROWS (ROW0|ROW1|ROW2|ROW3) 
.................... #define ALL_PINS (ALL_ROWS|COL0|COL1|COL2) 
....................  
.................... // Keypad layout: 
.................... char const KEYS[4][3] = {{'1','2','3'}, 
....................                          {'4','5','6'}, 
....................                          {'7','8','9'}, 
....................                          {'*','0','#'}}; 
....................  
.................... #define KBD_DEBOUNCE_FACTOR 33    // Set this number to apx n/333 where 
....................                                   // n is the number of times you expect 
....................                                   // to call kbd_getc each second 
....................  
....................  
.................... void kbd_init() { 
*
00D1:  BCF    0A.3
00D2:  BCF    0A.4
00D3:  GOTO   295 (RETURN)
.................... } 
....................  
.................... char kbd_getc( ) { 
....................    static BYTE kbd_call_count; 
*
028E:  BCF    03.5
028F:  CLRF   20
....................    static int1 kbd_down; 
0290:  BCF    21.0
....................    static char last_key; 
0291:  CLRF   22
....................    static BYTE col; 
0292:  CLRF   23
....................  
....................    BYTE kchar; 
....................    BYTE row; 
....................  
....................    kchar='\0'; 
*
015D:  CLRF   26
....................    if(++kbd_call_count>KBD_DEBOUNCE_FACTOR) { 
015E:  INCF   20,F
015F:  MOVF   20,W
0160:  SUBLW  21
0161:  BTFSC  03.0
0162:  GOTO   1DE
....................        switch (col) { 
0163:  MOVF   23,W
0164:  BTFSC  03.2
0165:  GOTO   16D
0166:  XORLW  01
0167:  BTFSC  03.2
0168:  GOTO   173
0169:  XORLW  03
016A:  BTFSC  03.2
016B:  GOTO   179
016C:  GOTO   17E
....................          case 0   : set_tris_kbd(ALL_PINS&~COL0); 
016D:  MOVLW  DE
016E:  BSF    03.5
016F:  MOVWF  06
....................                     kbd=~COL0&ALL_PINS; 
0170:  BCF    03.5
0171:  MOVWF  06
....................                     break; 
0172:  GOTO   17E
....................          case 1   : set_tris_kbd(ALL_PINS&~COL1); 
0173:  MOVLW  BE
0174:  BSF    03.5
0175:  MOVWF  06
....................                     kbd=~COL1&ALL_PINS; 
0176:  BCF    03.5
0177:  MOVWF  06
....................                     break; 
0178:  GOTO   17E
....................          case 2   : set_tris_kbd(ALL_PINS&~COL2); 
0179:  MOVLW  7E
017A:  BSF    03.5
017B:  MOVWF  06
....................                     kbd=~COL2&ALL_PINS; 
017C:  BCF    03.5
017D:  MOVWF  06
....................                     break; 
....................        } 
....................  
....................        if(kbd_down) { 
017E:  BTFSS  21.0
017F:  GOTO   18A
....................          if((kbd & (ALL_ROWS))==(ALL_ROWS)) { 
0180:  MOVF   06,W
0181:  ANDLW  1E
0182:  SUBLW  1E
0183:  BTFSS  03.2
0184:  GOTO   189
....................            kbd_down=FALSE; 
0185:  BCF    21.0
....................            kchar=last_key; 
0186:  MOVF   22,W
0187:  MOVWF  26
....................            last_key='\0'; 
0188:  CLRF   22
....................          } 
....................        } else { 
0189:  GOTO   1DD
....................           if((kbd & (ALL_ROWS))!=(ALL_ROWS)) { 
018A:  MOVF   06,W
018B:  ANDLW  1E
018C:  SUBLW  1E
018D:  BTFSC  03.2
018E:  GOTO   1D8
....................              if((kbd & ROW0)==0) 
018F:  MOVF   06,W
0190:  ANDLW  02
0191:  BTFSS  03.2
0192:  GOTO   195
....................                row=0; 
0193:  CLRF   27
0194:  GOTO   1A9
....................              else if((kbd & ROW1)==0) 
0195:  MOVF   06,W
0196:  ANDLW  04
0197:  BTFSS  03.2
0198:  GOTO   19C
....................                row=1; 
0199:  MOVLW  01
019A:  MOVWF  27
019B:  GOTO   1A9
....................              else if((kbd & ROW2)==0) 
019C:  MOVF   06,W
019D:  ANDLW  08
019E:  BTFSS  03.2
019F:  GOTO   1A3
....................                row=2; 
01A0:  MOVLW  02
01A1:  MOVWF  27
01A2:  GOTO   1A9
....................              else if((kbd & ROW3)==0) 
01A3:  MOVF   06,W
01A4:  ANDLW  10
01A5:  BTFSS  03.2
01A6:  GOTO   1A9
....................                row=3; 
01A7:  MOVLW  03
01A8:  MOVWF  27
....................              last_key =KEYS[row][col]; 
01A9:  MOVF   27,W
01AA:  MOVWF  28
01AB:  MOVLW  03
01AC:  MOVWF  29
*
01D1:  MOVF   23,W
01D2:  ADDWF  78,W
01D3:  CALL   004
01D4:  MOVWF  78
01D5:  MOVWF  22
....................              kbd_down = TRUE; 
01D6:  BSF    21.0
....................           } else { 
01D7:  GOTO   1DD
....................              ++col; 
01D8:  INCF   23,F
....................              if(col==3) 
01D9:  MOVF   23,W
01DA:  SUBLW  03
01DB:  BTFSC  03.2
....................                col=0; 
01DC:  CLRF   23
....................           } 
....................        } 
....................       kbd_call_count=0; 
01DD:  CLRF   20
....................    } 
....................   set_tris_kbd(ALL_PINS); 
01DE:  MOVLW  FE
01DF:  BSF    03.5
01E0:  MOVWF  06
....................   return(kchar); 
01E1:  BCF    03.5
01E2:  MOVF   26,W
01E3:  MOVWF  78
01E4:  BCF    0A.3
01E5:  BCF    0A.4
01E6:  GOTO   2A0 (RETURN)
.................... } 
....................  
....................  
.................... #include <LCD.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0064:  MOVLW  0F
0065:  BSF    03.5
0066:  ANDWF  06,W
0067:  IORLW  F0
0068:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0069:  BCF    03.5
006A:  BSF    06.2
....................    delay_cycles(1); 
006B:  NOP
....................    lcd_output_enable(1); 
006C:  BSF    06.0
....................    delay_cycles(1); 
006D:  NOP
....................    high = lcd_read_nibble(); 
006E:  CALL   058
006F:  MOVF   78,W
0070:  MOVWF  33
....................        
....................    lcd_output_enable(0); 
0071:  BCF    06.0
....................    delay_cycles(1); 
0072:  NOP
....................    lcd_output_enable(1); 
0073:  BSF    06.0
....................    delay_us(1); 
0074:  NOP
....................    low = lcd_read_nibble(); 
0075:  CALL   058
0076:  MOVF   78,W
0077:  MOVWF  32
....................        
....................    lcd_output_enable(0); 
0078:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0079:  MOVLW  0F
007A:  BSF    03.5
007B:  ANDWF  06,W
007C:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
007D:  BCF    03.5
007E:  SWAPF  33,W
007F:  MOVWF  77
0080:  MOVLW  F0
0081:  ANDWF  77,F
0082:  MOVF   77,W
0083:  IORWF  32,W
0084:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0058:  MOVF   06,W
0059:  MOVWF  77
005A:  SWAPF  06,W
005B:  ANDLW  0F
005C:  MOVWF  78
....................   #endif 
005D:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
004C:  SWAPF  33,W
004D:  ANDLW  F0
004E:  MOVWF  77
004F:  MOVLW  0F
0050:  ANDWF  06,W
0051:  IORWF  77,W
0052:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0053:  NOP
....................    lcd_output_enable(1); 
0054:  BSF    06.0
....................    delay_us(2); 
0055:  GOTO   056
....................    lcd_output_enable(0); 
0056:  BCF    06.0
0057:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
005E:  BSF    03.5
005F:  BCF    06.0
....................    lcd_rs_tris(); 
0060:  BCF    06.1
....................    lcd_rw_tris(); 
0061:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0062:  BCF    03.5
0063:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0085:  MOVF   78,W
0086:  MOVWF  32
0087:  BTFSC  32.7
0088:  GOTO   064
....................    lcd_output_rs(address); 
0089:  BTFSS  30.0
008A:  BCF    06.1
008B:  BTFSC  30.0
008C:  BSF    06.1
....................    delay_cycles(1); 
008D:  NOP
....................    lcd_output_rw(0); 
008E:  BCF    06.2
....................    delay_cycles(1); 
008F:  NOP
....................    lcd_output_enable(0); 
0090:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0091:  SWAPF  31,W
0092:  MOVWF  32
0093:  MOVLW  0F
0094:  ANDWF  32,F
0095:  MOVF   32,W
0096:  MOVWF  33
0097:  CALL   04C
....................    lcd_send_nibble(n & 0xf); 
0098:  MOVF   31,W
0099:  ANDLW  0F
009A:  MOVWF  32
009B:  MOVWF  33
009C:  CALL   04C
009D:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
009E:  MOVLW  0F
009F:  BSF    03.5
00A0:  ANDWF  06,W
00A1:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
00A2:  BCF    06.0
....................    lcd_rs_tris(); 
00A3:  BCF    06.1
....................    lcd_rw_tris(); 
00A4:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00A5:  BCF    03.5
00A6:  BCF    06.1
....................    lcd_output_rw(0); 
00A7:  BCF    06.2
....................    lcd_output_enable(0); 
00A8:  BCF    06.0
....................      
....................    delay_ms(15); 
00A9:  MOVLW  0F
00AA:  MOVWF  2C
00AB:  CALL   037
....................    for(i=1;i<=3;++i) 
00AC:  MOVLW  01
00AD:  MOVWF  26
00AE:  MOVF   26,W
00AF:  SUBLW  03
00B0:  BTFSS  03.0
00B1:  GOTO   0BA
....................    { 
....................        lcd_send_nibble(3); 
00B2:  MOVLW  03
00B3:  MOVWF  33
00B4:  CALL   04C
....................        delay_ms(5); 
00B5:  MOVLW  05
00B6:  MOVWF  2C
00B7:  CALL   037
00B8:  INCF   26,F
00B9:  GOTO   0AE
....................    } 
....................     
....................    lcd_send_nibble(2); 
00BA:  MOVLW  02
00BB:  MOVWF  33
00BC:  CALL   04C
....................    delay_ms(5); 
00BD:  MOVLW  05
00BE:  MOVWF  2C
00BF:  CALL   037
....................    for(i=0;i<=3;++i) 
00C0:  CLRF   26
00C1:  MOVF   26,W
00C2:  SUBLW  03
00C3:  BTFSS  03.0
00C4:  GOTO   0CE
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00C5:  MOVF   26,W
00C6:  CALL   014
00C7:  MOVWF  27
00C8:  CLRF   30
00C9:  MOVF   27,W
00CA:  MOVWF  31
00CB:  CALL   05E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00CC:  INCF   26,F
00CD:  GOTO   0C1
00CE:  BCF    0A.3
00CF:  BCF    0A.4
00D0:  GOTO   294 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
00D4:  DECFSZ 2D,W
00D5:  GOTO   0D7
00D6:  GOTO   0DA
....................       address=LCD_LINE_TWO; 
00D7:  MOVLW  40
00D8:  MOVWF  2E
00D9:  GOTO   0DB
....................    else 
....................       address=0; 
00DA:  CLRF   2E
....................       
....................    address+=x-1; 
00DB:  MOVLW  01
00DC:  SUBWF  2C,W
00DD:  ADDWF  2E,F
....................    lcd_send_byte(0,0x80|address); 
00DE:  MOVF   2E,W
00DF:  IORLW  80
00E0:  MOVWF  2F
00E1:  CLRF   30
00E2:  MOVF   2F,W
00E3:  MOVWF  31
00E4:  CALL   05E
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00E5:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00E6:  MOVF   2B,W
00E7:  XORLW  07
00E8:  BTFSC  03.2
00E9:  GOTO   0F4
00EA:  XORLW  0B
00EB:  BTFSC  03.2
00EC:  GOTO   0F9
00ED:  XORLW  06
00EE:  BTFSC  03.2
00EF:  GOTO   101
00F0:  XORLW  02
00F1:  BTFSC  03.2
00F2:  GOTO   107
00F3:  GOTO   10C
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00F4:  MOVLW  01
00F5:  MOVWF  2C
00F6:  MOVWF  2D
00F7:  CALL   0D4
00F8:  GOTO   111
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00F9:  CLRF   30
00FA:  MOVLW  01
00FB:  MOVWF  31
00FC:  CALL   05E
....................                      delay_ms(2); 
00FD:  MOVLW  02
00FE:  MOVWF  2C
00FF:  CALL   037
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0100:  GOTO   111
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0101:  MOVLW  01
0102:  MOVWF  2C
0103:  MOVLW  02
0104:  MOVWF  2D
0105:  CALL   0D4
0106:  GOTO   111
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0107:  CLRF   30
0108:  MOVLW  10
0109:  MOVWF  31
010A:  CALL   05E
010B:  GOTO   111
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
010C:  MOVLW  01
010D:  MOVWF  30
010E:  MOVF   2B,W
010F:  MOVWF  31
0110:  CALL   05E
....................      #endif 
....................    } 
0111:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
....................  
.................... void main(){ 
*
0285:  MOVF   03,W
0286:  ANDLW  1F
0287:  MOVWF  03
0288:  BSF    03.5
0289:  BSF    1F.0
028A:  BSF    1F.1
028B:  BSF    1F.2
028C:  BCF    1F.3
028D:  BCF    03.7
....................    char k; 
....................    int x; 
....................    lcd_init(); 
*
0293:  GOTO   09E
....................    kbd_init(); 
0294:  GOTO   0D1
....................    port_b_pullups(TRUE); 
0295:  BSF    03.5
0296:  BCF    01.7
....................  
....................    lcd_putc("\fPRONTO..."); 
0297:  MOVLW  1C
0298:  BCF    03.5
0299:  BSF    03.6
029A:  MOVWF  0D
029B:  MOVLW  00
029C:  MOVWF  0F
029D:  BCF    03.6
029E:  CALL   112
....................    while(TRUE){ 
....................       k = kbd_getc(); 
029F:  GOTO   15D
02A0:  MOVF   78,W
02A1:  MOVWF  24
....................       x = k-48; 
02A2:  MOVLW  30
02A3:  SUBWF  24,W
02A4:  MOVWF  25
....................       if(k!=0){ 
02A5:  MOVF   24,F
02A6:  BTFSC  03.2
02A7:  GOTO   301
....................          if(k=='*') 
02A8:  MOVF   24,W
02A9:  SUBLW  2A
02AA:  BTFSS  03.2
02AB:  GOTO   2B0
....................             lcd_putc('\f'); 
02AC:  MOVLW  0C
02AD:  MOVWF  2B
02AE:  CALL   0E6
02AF:  GOTO   301
....................          else{ 
....................             lcd_putc(k); 
02B0:  MOVF   24,W
02B1:  MOVWF  2B
02B2:  CALL   0E6
....................             delay_ms(500); 
02B3:  MOVLW  02
02B4:  MOVWF  26
02B5:  MOVLW  FA
02B6:  MOVWF  2C
02B7:  CALL   037
02B8:  DECFSZ 26,F
02B9:  GOTO   2B5
....................  
....................             printf(lcd_putc, "\f Car=%c", k); 
02BA:  MOVLW  22
02BB:  BSF    03.6
02BC:  MOVWF  0D
02BD:  MOVLW  00
02BE:  MOVWF  0F
02BF:  BCF    03.0
02C0:  MOVLW  06
02C1:  BCF    03.6
02C2:  MOVWF  26
02C3:  CALL   1E7
02C4:  MOVF   24,W
02C5:  MOVWF  2B
02C6:  CALL   0E6
....................             delay_ms(500); 
02C7:  MOVLW  02
02C8:  MOVWF  26
02C9:  MOVLW  FA
02CA:  MOVWF  2C
02CB:  CALL   037
02CC:  DECFSZ 26,F
02CD:  GOTO   2C9
....................  
....................             printf(lcd_putc, "\f Car=%u", k); //ASCII 
02CE:  MOVLW  27
02CF:  BSF    03.6
02D0:  MOVWF  0D
02D1:  MOVLW  00
02D2:  MOVWF  0F
02D3:  BCF    03.0
02D4:  MOVLW  06
02D5:  BCF    03.6
02D6:  MOVWF  26
02D7:  CALL   1E7
02D8:  MOVF   24,W
02D9:  MOVWF  26
02DA:  MOVLW  1B
02DB:  MOVWF  27
02DC:  CALL   250
....................             delay_ms(500); 
02DD:  MOVLW  02
02DE:  MOVWF  26
02DF:  MOVLW  FA
02E0:  MOVWF  2C
02E1:  CALL   037
02E2:  DECFSZ 26,F
02E3:  GOTO   2DF
....................  
....................             printf(lcd_putc, "\f Car=%u", x); //Valor numerico 
02E4:  MOVLW  2C
02E5:  BSF    03.6
02E6:  MOVWF  0D
02E7:  MOVLW  00
02E8:  MOVWF  0F
02E9:  BCF    03.0
02EA:  MOVLW  06
02EB:  BCF    03.6
02EC:  MOVWF  26
02ED:  CALL   1E7
02EE:  MOVF   25,W
02EF:  MOVWF  26
02F0:  MOVLW  1B
02F1:  MOVWF  27
02F2:  CALL   250
....................             delay_ms(500); 
02F3:  MOVLW  02
02F4:  MOVWF  26
02F5:  MOVLW  FA
02F6:  MOVWF  2C
02F7:  CALL   037
02F8:  DECFSZ 26,F
02F9:  GOTO   2F5
....................  
....................             lcd_putc("\fPRONTO..."); 
02FA:  MOVLW  31
02FB:  BSF    03.6
02FC:  MOVWF  0D
02FD:  MOVLW  00
02FE:  MOVWF  0F
02FF:  BCF    03.6
0300:  CALL   112
....................  
....................          } 
....................       } 
0301:  GOTO   29F
....................    } 
....................  
.................... } 
0302:  SLEEP

Configuration Fuses:
   Word  1: 3F79   XT NOWDT NOPUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
